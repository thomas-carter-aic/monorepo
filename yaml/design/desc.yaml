filename: desc.md
path: docs/design/desc.md
title: null
headings:
- "## \U0001F9E0 Step 1: Identify Core Capability Domains by Perspective"
- "### \U0001F9D1\u200D\U0001F4BC Internal Users"
- "### \U0001F465 External Users"
- "### \U0001F4E3 Marketing Site"
- "## \U0001F9ED Step 2: Group Capabilities into Core, Supporting, Generic Domains"
- "## \U0001F4C1 Step 3: Monorepo Structure Recommendation (Top Level)"
- "## \U0001F504 Step 4: Design the Cross-Cutting Architecture"
- "### \U0001F3D7 Shared Core Infrastructure"
- "## \U0001F9E9 Step 5: Define Domain Events for Communication"
- "## \U0001F4DC Step 6: Establish Ubiquitous Language"
- "## \U0001F510 Step 7: Define Roles and Access Policies"
- "## \u2705 Summary: What You Should Do Now"
- '## 1. Executive Overview'
- '## 2. Strategic Goals'
- '## 3. Multi-Tenant & Multi-Role System Design'
- '### 3.1 User Roles'
- '### 3.2 Portal Architecture'
- '## 4. Core Domains & Capability Map'
- '### 4.1 Core Domains'
- '### 4.2 Supporting Domains'
- '### 4.3 Generic Domains'
- '## 5. Architecture Foundations'
- '## 6. Monorepo Structure'
- '## 7. Ubiquitous Language (Sample)'
- '## 8. Security and Access'
- '## 9. Observability'
- '## 10. Extensibility & Developer Ecosystem'
- '## 11. Next Steps'
- '## 12. Appendix'
content:
- the system is being designed with multiple user-types in mind.
- 'Admin: there will be an admin (myself) which will administer the entire system,'
- Consultant users will be my employees,
- Client users will be individuals that work for my clients who will be  using the
  AI PaaS platform on behalf of my clients,
- Developer users will be my own internal developers and developers working for my
  clients or developers my clients have hired and/or third party developers,
- Vendor users who will be managing their own applications, extensions, integrations,
  etc. in our marketplace,
- Support personnel who work for me,
- possibly some others user types
- There will be a business/corporate/marketing site which I will use for establishing
  the web presence for my consulting company as well as marketing our AI PaaS and
  other SaaS products.
- There will be an employee portal.
- There will be an admin portal and dashboard for administrating the system.
- There will be an investor portal with a virtual data room.
- There will be a support portal for support, helpdesk, knowledge base, ticketing,
  etc.
- There will be a developer portal with developer specific information
- Each client will have their own dashboards, profiles, and abilities to use the AI
  PaaS and other SaaS products they subscribe to
- Thus, I need to determine the core capabilities for all these areas. There will
  be internal microservices that apply to the system as a whole. There will be client
  facing microservices. There may be some shared/common microservices.
- How should/could we best approach this
- ''
- ''
- ''
- "Designing a system like this \u2014 with **multi-tenant, multi-role, multi-portal\
  \ complexity** \u2014 calls for a structured and layered approach to defining your\
  \ **core capabilities**, **bounded contexts**, and **services**. Below is a plan\
  \ that combines **DDD**, **MACH principles**, and **platform product thinking**\
  \ to guide you from concept to architecture."
- ''
- '---'
- ''
- ''
- "Let\u2019s deconstruct by **user type and portal** to reveal underlying capabilities.\
  \ These are your **bounded contexts** or domain services."
- ''
- ''
- '| Portal / Role    | Capabilities                                                         |
  Domain Context                                 |'
- '| ---------------- | --------------------------------------------------------------------
  | ---------------------------------------------- |'
- '| Admin Portal     | Tenant management, system config, app visibility, user impersonation
  | `admin`, `tenancy`, `users`, `audit`           |'
- '| Employee Portal  | Task management, project visibility, internal comms                  |
  `projects`, `internal-tools`, `communications` |'
- '| Support Portal   | Helpdesk, ticketing, knowledge base, live chat                       |
  `support`, `tickets`, `kb`, `messaging`        |'
- '| Developer Portal | App registration, API keys, docs, SDKs, sandbox                      |
  `devtools`, `marketplace`, `auth`, `telemetry` |'
- ''
- ''
- '| Role              | Capabilities                                                 |
  Domain Context                                         |'
- '| ----------------- | ------------------------------------------------------------
  | ------------------------------------------------------ |'
- '| Client Users      | AI workspace, model execution, dashboards, billing, settings
  | `clients`, `workspace`, `billing`, `models`, `data`    |'
- '| Client Developers | Integration setup, access tokens, API docs                   |
  `devtools`, `auth`, `events`, `integrations`           |'
- '| Vendors           | App submissions, analytics, support inbox, API monetization  |
  `marketplace`, `apps`, `vendor-portal`, `analytics`    |'
- '| Investors         | Access to financials, reports, VDR, investor communications  |
  `investor-relations`, `vdr`, `legal-docs`, `analytics` |'
- ''
- ''
- '* Lead generation'
- '* Blog, updates'
- '* Product landing pages'
- '* Forms & newsletter subscriptions'
- ''
- 'Context: `marketing`, `web`, `cms`, `seo`, `leads`'
- ''
- '---'
- ''
- ''
- '| Type           | Capabilities                                                                 |'
- '| -------------- | ----------------------------------------------------------------------------
  |'
- '| **Core**       | AI Workspace, Model Management, Client Dashboards, Templates,
  Data Ingestion |'
- '| **Supporting** | Marketplace, App Registry, Billing, Integrations, User Identity              |'
- '| **Generic**    | Auth, Audit Logs, Webhooks, Email Delivery, Tenant Billing,
  Role Management  |'
- ''
- '---'
- ''
- ''
- '```'
- apps/
- "\u251C\u2500\u2500 marketing-site/"
- "\u251C\u2500\u2500 admin-portal/"
- "\u251C\u2500\u2500 employee-portal/"
- "\u251C\u2500\u2500 support-portal/"
- "\u251C\u2500\u2500 developer-portal/"
- "\u251C\u2500\u2500 investor-portal/"
- "\u251C\u2500\u2500 client-dashboards/"
- services/
- "\u251C\u2500\u2500 ai-workspace/              # Model runs, pipelines, output views"
- "\u251C\u2500\u2500 auth/                      # Centralized identity & role mgmt"
- "\u251C\u2500\u2500 billing/                   # Invoicing, usage tracking, plans"
- "\u251C\u2500\u2500 clients/                   # Organizations, access control"
- "\u251C\u2500\u2500 support/                   # Tickets, agents, status"
- "\u251C\u2500\u2500 devtools/                  # APIs, keys, webhooks, logs"
- "\u251C\u2500\u2500 marketplace/               # App listings, vendor analytics"
- "\u251C\u2500\u2500 templates/                 # Prompt + workflow templates"
- "\u251C\u2500\u2500 projects/                  # Internal project mgmt (consulting)"
- "\u251C\u2500\u2500 investor-relations/        # VDR, investor-specific access"
- "\u251C\u2500\u2500 analytics/                 # Usage, business KPIs, dashboards"
- "\u251C\u2500\u2500 tenancy/                   # Tenant onboarding + provisioning"
- packages/
- "\u251C\u2500\u2500 ui/"
- "\u251C\u2500\u2500 auth-client/"
- "\u251C\u2500\u2500 event-bus/"
- "\u251C\u2500\u2500 design-system/"
- "\u251C\u2500\u2500 utils/"
- "\u251C\u2500\u2500 api-clients/"
- config/
- docs/
- '```'
- ''
- '---'
- ''
- ''
- ''
- '| Capability      | Domain / Tooling                             |'
- '| --------------- | -------------------------------------------- |'
- '| Multi-tenancy   | `tenancy/`, `clients/`                       |'
- '| AuthN/AuthZ     | Centralized auth service (OIDC/SAML support) |'
- '| Event Bus       | Kafka / NATS / Redis Streams                 |'
- '| Event Store     | PostgreSQL w/ outbox or EventStoreDB         |'
- '| CI/CD & Secrets | Terraform + Vault + ArgoCD or CircleCI       |'
- '| Observability   | Logging, tracing, metrics                    |'
- ''
- '---'
- ''
- ''
- 'Establish a common domain event spec:'
- ''
- '```json'
- '{'
- '"type": "UserInvited",'
- '"context": "clients",'
- '"tenantId": "acme",'
- '"payload": {'
- '"email": "john@example.com",'
- '"role": "developer"'
- '},'
- '"metadata": {'
- '"correlationId": "...",'
- '"timestamp": "...",'
- '"source": "admin-portal"'
- '}'
- '}'
- '```'
- ''
- 'Used for:'
- ''
- '* CQRS projections'
- '* Sagas (orchestration)'
- '* Audit logging'
- '* Triggers and workflows'
- ''
- '---'
- ''
- ''
- 'Document a `docs/ubiquitous-language.md`:'
- ''
- "* \u201CWorkspace\u201D = client's AI environment"
- "* \u201CExecution\u201D = run of a model or pipeline"
- "* \u201CIntegration\u201D = third-party service connected to a client"
- "* \u201CTemplate\u201D = reusable AI use case blueprint"
- ''
- Make sure your model, services, and UI reflect this language.
- ''
- '---'
- ''
- ''
- 'Create a `services/auth/roles.ts` or RBAC model:'
- ''
- '```ts'
- // user-roles.ts
- export const Roles = {
- 'Admin: ''admin'','
- 'Consultant: ''consultant'','
- 'ClientUser: ''client_user'','
- 'Developer: ''developer'','
- 'Vendor: ''vendor'','
- 'Support: ''support'','
- 'Investor: ''investor'''
- '};'
- '```'
- ''
- 'Use policies like:'
- ''
- '* `canImpersonateUser()`'
- '* `canSubmitApp()`'
- '* `canViewModelOutputs()`'
- ''
- And assign **scopes** or **tenants** to those roles for fine-grained access.
- ''
- '---'
- ''
- ''
- '| Action                                         | Outcome                                          |'
- '| ---------------------------------------------- | ------------------------------------------------
  |'
- "| Map all users \u2192 capabilities \u2192 contexts        | Your domain model\
  \ & service map                  |"
- '| Scaffold services/portals using consistent DDD | Start clean & structured                         |'
- '| Use shared packages for eventing, auth, UI     | Enforce DRY & reusability                        |'
- '| Codify roles and access levels                 | Secure & isolated experiences
  for each user type |'
- '| Define event schema, setup event bus           | Enables event-driven, observable
  architecture    |'
- '| Document all domain terms & flows              | Ensures shared understanding
  across your org     |'
- ''
- '---'
- ''
- 'Would you like me to generate:'
- ''
- '* A domain map markdown table?'
- '* A scaffolding script for all user types and services?'
- '* Role-based access model + policy definitions?'
- ''
- "Let\u2019s make this real and codified in your monorepo."
- ''
- ''
- ''
- '**Title: Domain-Driven Platform Architecture for Multi-Tenant AI Consulting & PaaS
  Business**'
- ''
- '---'
- ''
- ''
- This document defines the strategic and technical blueprint for a consulting company
  that provides AI consulting, enablement, and transformation to SMB and enterprise
  clients. It also operates a multi-tenant AI PaaS and SaaS product suite. The system
  supports diverse user types and use cases across internal and external domains.
- ''
- '---'
- ''
- ''
- '* Deliver modular, scalable AI consulting services.'
- '* Operate a robust, secure AI PaaS platform for external clients.'
- '* Support a rich ecosystem of internal users, external clients, developers, and
  vendors.'
- '* Establish a unified architecture that enforces DDD, clean/hexagonal architecture,
  CQRS, event sourcing, and MACH principles.'
- ''
- '---'
- ''
- ''
- ''
- '| Role            | Description                                                                       |'
- '| --------------- | ---------------------------------------------------------------------------------
  |'
- '| **Admin**       | Global system administrator with full privileges across all
  contexts.             |'
- '| **Consultant**  | Internal consultants responsible for client delivery and transformation
  projects. |'
- '| **Client User** | Individual working for a client who uses the AI PaaS platform.                    |'
- '| **Developer**   | Internal developers or external developers hired by clients.                      |'
- '| **Vendor**      | Third-party or partner developer who publishes apps, integrations,
  or extensions. |'
- '| **Support**     | Internal support and success personnel.                                           |'
- '| **Investor**    | Read-only portal access to KPIs, financials, and VDR.                             |'
- ''
- ''
- '| Portal                | Purpose                                                                 |'
- '| --------------------- | -----------------------------------------------------------------------
  |'
- '| **Admin Portal**      | Platform administration, tenant management, impersonation
  tools.        |'
- '| **Employee Portal**   | Consultants'' internal tools and dashboards.                             |'
- '| **Client Dashboards** | Client workspace to run AI models, access usage stats,
  team management. |'
- '| **Developer Portal**  | API registration, sandbox environment, webhook & telemetry
  inspection.  |'
- '| **Vendor Portal**     | Manage marketplace listings, analytics, support tickets.                |'
- '| **Investor Portal**   | View financials, download reports, access VDR.                          |'
- '| **Support Portal**    | Ticketing, live chat, knowledge base management.                        |'
- '| **Marketing Site**    | Corporate website, blog, lead capture.                                  |'
- ''
- '---'
- ''
- ''
- ''
- '| Domain           | Description                                               |'
- '| ---------------- | ---------------------------------------------------------
  |'
- '| **AI Workspace** | Clients run, manage, and collaborate on AI models.        |'
- '| **Solutions**    | Model delivery, lifecycle, retraining, evaluation.        |'
- '| **Templates**    | Modular, reusable patterns for AI use cases.              |'
- '| **IP Assets**    | Internal reusable assets, frameworks, and best practices.
  |'
- '| **Engagements**  | Consultant-client projects and scopes.                    |'
- '| **Projects**     | Internal delivery timelines, SOW execution.               |'
- ''
- ''
- '| Domain                 | Description                                       |'
- '| ---------------------- | ------------------------------------------------- |'
- '| **Enablement**         | Client dashboards, onboarding flows, diagnostics. |'
- '| **DevTools**           | API clients, key management, usage logs.          |'
- '| **Support**            | Tickets, SLAs, workflows, knowledge base.         |'
- '| **Marketplace**        | Vendor and client integrations, app publishing.   |'
- '| **Assessments**        | Data maturity, AI readiness evaluations.          |'
- '| **Investor Relations** | Investor tools, reports, permissions.             |'
- ''
- ''
- '| Domain            | Description                                 |'
- '| ----------------- | ------------------------------------------- |'
- '| **Auth**          | Identity, role, policy, tenant access.      |'
- '| **Billing**       | Usage tracking, invoicing, plan management. |'
- '| **Notifications** | Event-driven alerting system.               |'
- '| **Analytics**     | Cross-system usage, KPIs, audit logs.       |'
- '| **Tenancy**       | Org provisioning, tenant boundaries.        |'
- ''
- '---'
- ''
- ''
- '* **Clean/Hexagonal Architecture**: Internal domain logic is decoupled from I/O
  concerns.'
- '* **CQRS**: Split read models (dashboards, logs, analytics) from write models (commands,
  mutations).'
- '* **Event Sourcing**: Persist business facts as events, derive current state.'
- '* **Saga Patterns**: Implement orchestration/choreography for long-running workflows
  (e.g., onboarding).'
- '* **MACH**: Modular, API-first, Cloud-native, Headless principles enforced across
  the stack.'
- ''
- '---'
- ''
- ''
- '```'
- apps/
- admin-portal/
- client-dashboards/
- developer-portal/
- employee-portal/
- investor-portal/
- marketing-site/
- support-portal/
- ''
- services/
- ai-workspace/
- assessments/
- auth/
- billing/
- clients/
- devtools/
- engagements/
- enablement/
- investor-relations/
- ip-assets/
- marketplace/
- notifications/
- projects/
- solutions/
- support/
- templates/
- tenancy/
- ''
- packages/
- api-clients/
- auth-client/
- design-system/
- domain-events/
- event-bus/
- ui/
- utils/
- ''
- infra/
- config/
- docs/
- scripts/
- '```'
- ''
- '---'
- ''
- ''
- '* **Workspace**: Client''s dedicated environment for running AI workflows.'
- '* **Execution**: A model run triggered by a user or automation.'
- '* **Template**: Predefined configuration for a reusable use case.'
- '* **Engagement**: A scoped consulting project.'
- '* **IP Asset**: Reusable code or framework developed internally.'
- '* **Portal**: Role-specific application surface.'
- ''
- '---'
- ''
- ''
- '* **RBAC** with multi-tenant awareness.'
- '* Scoped API tokens and SDK access per developer or vendor.'
- '* Central auth service with pluggable providers (OIDC, SAML, etc).'
- '* Per-tenant secrets and config management.'
- ''
- '---'
- ''
- ''
- '* Distributed tracing via OpenTelemetry.'
- '* Event logs and projections stored for replayability.'
- '* Metrics at domain and tenant level.'
- '* Audit logs scoped per user and org.'
- ''
- '---'
- ''
- ''
- '* Marketplace APIs, app submission flows.'
- '* Webhooks and event subscriptions.'
- '* Client/SDK generator in `packages/api-clients/`'
- '* Developer sandbox and telemetry dashboard.'
- ''
- '---'
- ''
- ''
- '* [ ] Finalize DDD domain models per service'
- '* [ ] Scaffold core services (auth, clients, ai-workspace)'
- '* [ ] Define shared `domain-events` & `event-bus`'
- '* [ ] Stand up minimal portal skeletons'
- '* [ ] Setup Turbo, Changesets, CI/CD pipeline'
- '* [ ] Map first round of events & sagas'
- ''
- '---'
- ''
- ''
- '* ADRs to be added in `docs/architecture/adr/`'
- '* Ubiquitous Language dictionary in `docs/ubiquitous-language.md`'
- '* Event types documented in `packages/domain-events/`'
- '* CLI for scaffolding domains, services, and portals: `tools/dev-cli`'
- ''
- '---'
