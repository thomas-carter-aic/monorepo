filename: events.md
path: docs/requirements/events.md
title: Event-Driven Architecture & Domain Events
headings:
- '## Why Events?'
- '## Types of Events'
- '## Event Structure'
content:
- ''
- This document outlines how events are modeled, published, consumed, versioned, and
  used across the AIC AI Platform to achieve reactive, scalable, and decoupled service
  boundaries.
- ''
- '---'
- ''
- ''
- Domain events are the primary communication mechanism between bounded contexts.
  Events express something meaningful that **has already happened** in the system.
- ''
- 'Benefits include:'
- ''
- '- Loosely coupled microservices'
- '- Asynchronous workflows (e.g. CQRS + Event Sourcing)'
- '- Real-time notifications and auditability'
- '- Modular orchestration via Sagas and Policies'
- ''
- '---'
- ''
- ''
- '| Type         | Purpose |'
- '|--------------|---------|'
- '| **Domain Event** | Business-level fact emitted from an aggregate (e.g. `UserRegistered`)
  |'
- '| **Integration Event** | Externalized event meant for outside systems or cross-context
  pub-sub |'
- '| **System Event** | Internal technical event (e.g. `CacheRefreshed`, `DeploymentStarted`)
  |'
- '| **Saga Event** | Long-running workflow coordination (e.g. `StepFailed`, `CompensationTriggered`)
  |'
- ''
- '---'
- ''
- ''
- 'All events follow this interface:'
- ''
- '```ts'
- type DomainEvent<T = any> = {
- 'name: string;          // e.g., "ModelCreated"'
- 'version: string;       // e.g., "v1"'
- 'timestamp: string;     // ISO string'
- 'data: T;               // Payload schema'
- 'metadata?: {'
- 'traceId?: string;'
- 'tenantId?: string;'
- 'actorId?: string;'
- '};'
- '};'
- ''
- Schemas are validated with Zod.
- Event Lifecycle
- ''
- Raised by an aggregate or application service
- ''
- Persisted in event store (if event-sourced)
- ''
- Published to the event-bus
- ''
- Handled by zero or more listeners (policies, projections, sagas, external systems)
- ''
- Versioning Strategy
- ''
- 'To support event evolution:'
- ''
- Events are grouped into v1, v2, etc.
- ''
- Older consumers continue to use previous versions
- ''
- Breaking changes (field removal/renaming) result in a new version
- ''
- 'Example:'
- ''
- packages/domain-events/auth/v1/UserRegistered.ts
- packages/domain-events/auth/v2/UserRegistered.ts
- ''
- Event Export Pattern
- ''
- 'Every event file exports:'
- ''
- A named constant (event name)
- ''
- A schema definition (Zod)
- ''
- A typed payload interface
- ''
- 'Example:'
- ''
- // packages/domain-events/auth/v1/UserRegistered.ts
- import { z } from "zod";
- ''
- export const USER_REGISTERED = "auth.v1.UserRegistered";
- ''
- export const UserRegisteredSchema = z.object({
- 'userId: z.string().uuid(),'
- 'email: z.string().email(),'
- 'timestamp: z.string(),'
- '});'
- ''
- export type UserRegistered = z.infer<typeof UserRegisteredSchema>;
- ''
- Event Registration
- ''
- 'All events are re-exported in packages/domain-events/index.ts:'
- ''
- export * from './auth/v1/UserRegistered';
- export * from './model/v1/ModelCreated';
- // etc.
- ''
- This enables easier imports and developer ergonomics.
- Event Bus Implementation
- ''
- 'The event bus is located at packages/event-bus/ and provides:'
- ''
- publish(event)
- ''
- subscribe(eventName, handler)
- ''
- Adapters for message brokers (e.g., NATS, Kafka, Redis Streams)
- ''
- Internally uses an in-memory event emitter for dev and testing.
- Event Storage
- ''
- Event-sourced services store events in an event-store/ using append-only log files
  or database-backed event streams. Common libraries like @eventstore/db-client may
  be used.
- ''
- Snapshotting strategies may also apply for performance.
- Event Examples
- ''
- "UserRegistered \u2192 emitted from Auth context on user creation"
- ''
- "ModelCreated \u2192 emitted from AI Workspace when a model is generated"
- ''
- "EngagementCompleted \u2192 emitted when a consulting engagement is wrapped up"
- ''
- "AppInstalled \u2192 vendor marketplace extension installed into a client workspace"
- ''
- Guidelines
- ''
- Events must represent something in the past
- ''
- Name events using past tense (e.g., PaymentReceived, not ReceivePayment)
- ''
- Never mutate data in event handlers
- ''
- Prefer publishing events at the end of a transaction or aggregate mutation
- ''
- Avoid publishing events from HTTP controllers directly
- ''
- Next Steps
- ''
- Implement version folders for all existing events
- ''
- Add event templates to CLI (tools/cli/generators/event.ts)
- ''
- Register all existing events in packages/domain-events/index.ts
- ''
- Add tests for event schemas and handlers
- ''
- Document integration event boundaries (external systems)
- ''
- Define saga orchestration/coordination event contracts
